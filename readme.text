Standar API

{root.api}/{version}/{grouping}/endpoint
example: 
http://localhost:3000/v1/auth/login

Standar Status response
200 - OK - Call API Success
201 - CREATED - Post Success 
400 - BAD REQUEST - Error on Client Side (Misal salah input)
401 - UNAUTHORIZED - User not authorized to the REQUEST
403 - FORBIDDEN - User not allowed to access 
404 - NOT FOUND - Request endpoint not found
500 - INTERNAL SERVER ERROR - Error pada server Side
502 - BAD GATEWAY - Invalid response from another request

GROUP: 
auth
[1] - register
{root.api}/{version}/auth/register

req:
{
    "name": "testing",
    "email": "test@mail.com",
    "password": "123123"
}

res:
{
    "message": "Register Success",
    "data": {
        "id": 1,
        "name": "testing",
        "email": "test@mail.com",
        "password": "123123"
    }
}

err-response: 

[2] - login

blog
[1] - create blog
{root.api}/{version}/blog/create-blog

req :
{
    "title":"bottle",
    "image": "image.png",
    "body": "Book description"
}

res:
{
    "message": "Create Blog Success.",
    "data": {
        "post_id": 1,
        "title":"bottle",
        "image": "image.png",
        "body": "Book description",
        "created_at": "04/07/2024",
        "author": {
            "uid": 1,
            "name": "Testing"
        }
    }
}

[2] - get blogs
[3] - update blog
[4] - delete blog
[5] - pagination

====
SHARE API DOCUMENTATION POSTMAN
1. Buat Collection = mern-api2
2. Api Collection yang udah dibuat -> Workspace Baru
3. Collection - "mern-api2" klik (...) 
    - SHARE
    - Share mern-api2
    - Via API
        - Link collection in public Workspace
        - Copy link
        - https://elements.getpostman.com/redirect?entityId=9912097-cf439bd7-3f56-4a24-8b0c-caa7db43f391&entityType=collection
        
4. Cara 2
postman - open collection
pojok kanan atas = Publish 
arah ke website
- Publication Settings
    - Collection Details
    URL for published documentation
    https://documenter.getpostman.com/view/9912097/2sA3dxFCVt
    
    referensi NODE + Mongo
    https://www.bezkoder.com/node-express-mongodb-crud-rest-api/


==
multer = upload image
multer = will not process any form which is not multipart (multipart/form-data)
= tidak akan proses form selain multipart/form-data
npm install --save multer
multer adds a body object
basic usage in Html
<form action="/profile" method="post" enctype="multipart/form-data">
  <input type="file" name="avatar" />
</form>

API:
Key:
1. fieldname = file yang diupload memiliki object key = fieldname
2. originalname = nama file asli oleh user. misal file di upload "file.jpg"
   originalname = "file.jpg"
3. encoding = object properti dari file yang diupload oleh user
    -> 7bit, 8bit, or binary
4. mimetype = Multipurpose Internet Mail Extensions
    = jenis kontent file yang sedang di handle (kirim/terima)
    Mime = "type/subtype"
    'text/plain'
    'text/html'
    'text/css'
    'text/javascript'
    'image/jpeg'
    'image/png'
    'image/gif'
    'image/svg+xml'
    'audio/mpeg'
    'audio/wav'
    'audio/ogg'
    'video/mp4'
    'video/ogg'
    'application/json'
    'application/xml'
    'application/pdf'
    'application/zip'
5. size = ukuran file
6. destination = lokasi penyimpanan file pada server
    destination (req, file, cb) => cb untuk penympanan di server
7. filename = nama unik penyimpanan file di server
    file.fieldname+'-'+ Date.now() + path.extname(file.originalname)
    filename: (req, file, cb) => cb(null, )
8. path = full path to upload file
9. buffer = .... 
10. limits
multer({
    limits: {
        fieldNameSize,
        fieldSize,
        fields,
        fileSize,
        files,
        parts,
        headerPairs
    }
})

index.js

// upload image

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(
            null, // null = success
            'images'// direktori simpan file pada server
        )
    },
    filename: function (req, file, cb) {
        console.log('file --- ', file);
        /*
        {
            fieldname: 'image',
            originalname: 'Screenshot 2024-07-09 105311.png',
            encoding: '7bit',
            mimetype: 'image/png'
        }
        */
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        // 1E9 = 1 miliar => 0.12345 * 1 miliar = 123450000
        cb(null, file.originalname + '-' + uniqueSuffix)
    },
})

const fileFilter = (req, file, cb) => {
    if (file.mimetype === 'image/jpeg' || file.mimetype == 'image/jpg' || file.mimetype == 'image/png') {
        cb(null, true)
    } else {
        cb(null, false)
    }
}
const upload = multer({
    storage,
    fileFilter,
    limits: {
        fieldNameSize: 100, // 100 karakter
        fileSize: 1024 * 1024 * 5, // 5 Mb
        files: 4, // jumlah file upload = 4
        fields: 4, // jumlah field ikutaan maksimal 4 (misal name, email, phone, color)
        parts: 5, // form data multipart yang di upload harus kurang dari 5 form
        // hingga saat sukses upload, dapat lihat log req => req.body, req.fileSize, req.name, req.date,
        /*
        form-data: 
        {
        title,
        body,
        image,
        name
        }
        */
        headerPairs: 4, // max number of header key -> jumlah pasangan header yang diterima dari permintaan HTTP saat mengunggah file menggunakan form-data multipart
    }
})


app.use(upload.single('image'))

===
mongo db 
sintax dasar
1. db.blogspots.find({title: "today11"})
tuk buat Baru
"reset"
2. db.blogspots.find().sort({createdAt: -1})
"generate"
"find"
3. db.blogspots.find().sort({createdAt: -1}).limit(5)
"generate"
"find"

=
https://mongoosejs.com/docs/queries.html
=
DELETE DATA + FILE cooooool

exports.deleteOneBlog = async (req, res, next) => {
    try {
        const { _id } = req.params;
        const blog = await BlogData.findById(_id);
        const imagePath = path.join(__dirname, '../../' + blog.image)

        // fs.unlink(path, callback)
        fs.unlink(imagePath, async () => {
            // success delete image, then 
            // delete data in database
            await BlogData.findByIdAndDelete(_id);
            res.status(200).json({
                message: 'Delete Blog success'
            })
        })
    } catch (error) {
        const err = new Error('Blog not found!')
        err.status = 400;
        err.data = [];

        next(err)
    }
}

// -----
// Login
app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    try {
        const user = await User.findOne({ username });
        if (!user) return res.status(400).send('User not found');

        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) return res.status(400).send('Invalid password');

        const token = jwt.sign({ userId: user._id }, 'SECRET_KEY', { expiresIn: '1h' });
        res.status(200).json({ token });
    } catch (err) {
        res.status(500).send('Error logging in');
    }
});

// Middleware untuk verifikasi token
const authMiddleware = (req, res, next) => {
    const token = req.header('Authorization').replace('Bearer ', '');
    if (!token) return res.status(401).send('Access denied');

    try {
        const verified = jwt.verify(token, 'SECRET_KEY');
        req.user = verified;
        next();
    } catch (err) {
        res.status(400).send('Invalid token');
    }
};

// Route yang dilindungi
app.get('/protected', authMiddleware, (req, res) => {
    res.status(200).send('You have access to this protected route');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

=====
TOKEN
var token = jwt.sign({ userId: user.data?._id }, process.env.SECRET_KEY, { algorithm: 'RS256', expiresIn: '1h' });
//  jwt.sign({ userId: user.data?._id }, process.env.SECRET_KEY); = keamanan rendah
// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MjA3NTQzODB9.4BwedhQAOdL3lflo1KGU8DUsT1EM-6r_Bl9qu4NOwSc

jwt.sign({ userId: user.data?._id }, process.env.SECRET_KEY, { algorithm: 'RS256', expiresIn: '1h' });
Keamanan Tinggi -> menggunakan RSA

Penggunaan RSA untuk JWT
# Buat kunci privat
openssl genpkey -algorithm RSA -out privateKey.pem -pkeyopt rsa_keygen_bits:2048

# Ekstrak kunci publik dari kunci privat
openssl rsa -pubout -in privateKey.pem -out publicKey.pem

OpenSSL is an open source library that provides encryption, decryption, and other security functions to protect data.
encrypt emails, protect the website, and secure the internet connections
= encrypt data
= SSL certificates

download & install :
choco install openssl


https://dev.to/devland/how-to-generate-and-use-an-ssl-certificate-in-nodejs-2996

SSL = Secure Socket Layer

To generate the SSL Certificate we need to follow these steps as shown below:

Generate a Private Key
Create a CSR ( certificate signing request) using the private key.
Generate the SSL certification from CSR
Integrate SSL Certificate in Express

1. generate a private key
= to access a full-featured toolkit for:
    = Transport Layer Security (TLS)
    = Secure Sockets Layer (SSL)
run: 
openssl genrsa -out key.pem
private key stored in "key.pem" == CREATED
OK

2. create a CSR (Certificate Signing Request)
run: 
openssl req -new -key key.pem -out csr.pem
= generate CSR in scr.pem
country name = id
state or province = jakarta
locality name (city) = jakarta
organization name = mern
organization unit = mern
common name (or your name) = dika
email address = guitherez.gitW@gmail.com
a challange password = 12345678
an optional company name = wcs == CREATED
OK

3. Generate the SSL Certificate
generate SSL Certificate use key.pem & csr.pem;
= openssl x509 -req -days 365 -in csr.pem -signkey key.pem -out cert.pem
x509 = standard defining the format of the public-key certificate;
365 = validity of the certificate as 365 days;
cert.pem = CREATED
OK 

4. Integrate the SSL Certificate in Express
const options = {
    key: fs.readFileSync(path.join(__dirname, './key.pem')),
    cert: fs.readFileSync(path.join(__dirname, './cert.pem'))
}

token awal 
var token = jwt.sign({ userId: user.data?._id }, options.key, { algorithm: 'RS256', expiresIn: '1h' });
= 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MjA3NzE3NDQsImV4cCI6MTcyMDc3NTM0NH0.Qcxq34H_Mabz1OVXiKpM_GhKOT868mWoyG_b1sUStXqOPiCV3wkNpMZT_1MH0VVB01cbd7KN1W6frTrk7Mr2pZXXUBRfbcinrDBbUcUcs9Bq7ItaLHmfE2q10zgq5_c_48dk-IB_EHbTwkievKHh1wxM9zlyyPL6AhJBt_fTEdandmmDb6SLNDnkvknLs5jJiy9kdlxxxze0_x6K-TDidC5gz2Fx24CNytmnTEHoWXqoPmFy3Sho2lXt6Jp_0PuYfwicVWmUwIO0xfWFkD5_BmRPtot9dq1SwEDsR8AYewsqzXIp-4OrFNXrL5iNbVs8rRJCU1_7agF0ujtEHoLIXA'
DONE 
res.status(201).json({token})

CREATE VERIFY TOKEN
exports.verifyToken = async (req, res, next) => {
    const token = req.headers['authorization'].split(' ')[1];
    // POSTMAN Headers/Authorization = "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9......."
    // HARUS SPLIT get original token;
    if (!token) {
        return next(handleError('No token provided', 403))
    };
    jwt.verify(token, publicCert, { algorithms: ['RS256'] }, (err, decoded) => {
        if (err) {
            return next(handleError('Failed to authenticate token', 403))
        }
        req.userId = decoded.userId;
        next();
    })
}

contoh route
router.delete('/delete-blog/:_id', verifyToken, deleteOneBlog)

POSTMAN
deleteBlog 
    Authorization
        Auth Type = Bearer Token
        = eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MjA3NzE3NDQsImV4cCI6MTcyMDc3NTM0NH0.Qcxq34H_Mabz1OVXiKpM_GhKOT868mWoyG_b1sUStXqOPiCV3wkNpMZT_1MH0VVB01cbd7KN1W6frTrk7Mr2pZXXUBRfbcinrDBbUcUcs9Bq7ItaLHmfE2q10zgq5_c_48dk-IB_EHbTwkievKHh1wxM9zlyyPL6AhJBt_fTEdandmmDb6SLNDnkvknLs5jJiy9kdlxxxze0_x6K-TDidC5gz2Fx24CNytmnTEHoWXqoPmFy3Sho2lXt6Jp_0PuYfwicVWmUwIO0xfWFkD5_BmRPtot9dq1SwEDsR8AYewsqzXIp-4OrFNXrL5iNbVs8rRJCU1_7agF0ujtEHoLIXA
    headers
        Authorization = .............
    OK
HIT API = OK

PRIVATE Key ----- KEREN
openssl genrsa -out private.key 2048

PUBLIC Key ----- KEREN
openssl rsa -in private.key -outform PEM -pubout -out public.key
========
Berikut adalah beberapa hal yang dapat Anda pertimbangkan untuk meningkatkan keamanan dan kegunaan lebih lanjut:

Perbarui Token (Token Refresh):
Implementasi sistem refresh token untuk memperbarui token yang mendekati waktu kedaluwarsa tanpa memaksa pengguna untuk login ulang.

Role-based Access Control (RBAC):
Menambahkan kontrol akses berbasis peran untuk memastikan bahwa hanya pengguna dengan peran yang sesuai yang dapat mengakses endpoint tertentu.

Log Aktivitas:
Menambahkan logging untuk aktivitas login dan verifikasi token, sehingga Anda dapat melacak upaya akses yang mencurigakan.

Error Handling yang Lebih Baik:
Menyempurnakan penanganan kesalahan untuk memberikan respon yang lebih informatif dan sesuai untuk klien.

======

Ringkasan Prioritas:
API LOGOUT
API HAPUS AKUN
Publish API Public
WebSocket di React Native
Membuat Notifikasi Android
Publish App

=====

vercel login
web vercel import file env
tuk cek di lokal = vercel env ls 

 name                       value               environments        created
 REFRESH_TOKEN_LIFE         Encrypted           Development         7m ago
 ACCESS_TOKEN_LIFE          Encrypted           Development         7m ago
 SECRET_KEY                 Encrypted           Development         7m ago
 PUBLIC_KEY_PATH            Encrypted           Development         7m ago
 PRIVATE_KEY_PATH           Encrypted           Development         7m ago

 OKK 

 mongo db atlas
 https://cloud.mongodb.com/v2/5edc97847548892b1bf7abce#/setup/access?includeToast=true

 create database baru pada project cluster EmployeeApp
 databases = mern-app
 username = mahardika
 password = mahardika12


Congratulations on setting up access rules!
You will now be able to connect to your deployments. You can continue to add and update access rules in Database Access and Network Access.

database mern-app
klik 'connect'
Connect to your application
= Drivers 
= Add your connection string into your application code
= mongodb+srv://mahardika:mahardika12@mern-app.j1nptro.mongodb.net/?retryWrites=true&w=majority&appName=mern-app

.env
MONGODB_CONNECTION_URL="mongodb+srv://mahardika:mahardika12@mern-app.j1nptro.mongodb.net/?retryWrites=true&w=majority&appName=mern-app"

pada project perlu di tambahkan dalam config ke mongodb

const env = require('dotenv').config(); // harus ditambahkan untuk akses .env
const url = process.env.MONGODB_CONNECTION_URL 

test pada postman 
MANTAB===

MENAMBAHKAN IP address
link = https://mern-api-tan.vercel.app/
cek api terminal = ping mern-api-tan.vercel.app

Pinging mern-api-tan.vercel.app [76.76.21.22] with 32 bytes of data:
Reply from 76.76.21.22: bytes=32 time=12ms TTL=248
Reply from 76.76.21.22: bytes=32 time=7ms TTL=248
Reply from 76.76.21.22: bytes=32 time=10ms TTL=248
Reply from 76.76.21.22: bytes=32 time=10ms TTL=248

cara 2
nslookup mern-api-tan.vercel.app
Server:  IDAZRDC01.wil.local ==> SERVER wifi laptop
Address:  10.1.88.88

Non-authoritative answer:
Name:    mern-api-tan.vercel.app
Addresses:  76.76.21.98
          76.76.21.22

